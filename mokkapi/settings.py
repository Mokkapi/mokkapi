"""
Django settings for mokkapi project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG", default=0))

ALLOWED_HOSTS =  ["localhost", "127.0.0.1"] 
#ALLOWED_HOSTS =  os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core', 
    'user_management',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'user_management.middleware.CurrentUserMiddleware',
]

ROOT_URLCONF = 'mokkapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    'user_management.backends.UsernameAuthBackend',
    'django.contrib.auth.backends.ModelBackend',  # Keep default as backup
]

WSGI_APPLICATION = 'mokkapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("POSTGRES_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("POSTGRES_DB", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("POSTGRES_USER", "user"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "password"),
        "HOST": os.environ.get("POSTGRES_HOST", "localhost"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# DigitalOcean Spaces credentials (for uploading via collectstatic)
AWS_ACCESS_KEY_ID = os.getenv('DIGITAL_OCEAN_SPACES_ACCESS_KEY', 'your_digitalocean_space_access_key')
AWS_SECRET_ACCESS_KEY = os.getenv('DIGITAL_OCEAN_SPACES_SECRET_KEY', 'your_digitalocean_space_secret_key')
AWS_STORAGE_BUCKET_NAME = os.getenv('DIGITAL_OCEAN_SPACES_NAME', 'your_space_name')

# DigitalOcean Spaces endpoint (adjust the region if needed, e.g., nyc3)
AWS_S3_ENDPOINT_URL = os.getenv('DIGITAL_OCEAN_SPACES_URL', 'https://nyc3.digitaloceanspaces.com')

# Optionally, define a custom domain. If not using one, Django can build the URL directly.
# Example: 'your_space_name.nyc3.digitaloceanspaces.com'    
AWS_S3_CUSTOM_DOMAIN = os.getenv('DIGITAL_OCEAN_SPACES_URL')

AWS_S3_CDN_DOMAIN = os.getenv('DIGITAL_OCEAN_CDN_URL')

# Set default parameters for uploaded files
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',  # Adjust caching as needed
}

# Specify the location within your Space to store static files
AWS_LOCATION = 'static'

# Use S3Boto3 storage for static files
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Set STATIC_URL to point to the public URL of your Space's static folder
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

STATIC_ROOT = BASE_DIR / "staticfiles"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

AUTH_USER_MODEL = 'user_management.User'